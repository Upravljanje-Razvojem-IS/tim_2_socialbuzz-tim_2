// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserWatchingService.Data;

namespace UserWatchingService.Migrations
{
    [DbContext(typeof(DataAccessLayer))]
    [Migration("20210902210318_Implement database")]
    partial class Implementdatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("UserWatchingService.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UserWatchingService.Entities.Watching", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WatchedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WatcherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WatchedId");

                    b.HasIndex("WatcherId");

                    b.ToTable("Watchings");
                });

            modelBuilder.Entity("UserWatchingService.Entities.WatchingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WatchingTypes");
                });

            modelBuilder.Entity("UserWatchingService.Entities.Watching", b =>
                {
                    b.HasOne("UserWatchingService.Entities.User", "Watched")
                        .WithMany("WatchingList")
                        .HasForeignKey("WatchedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UserWatchingService.Entities.User", "Watcher")
                        .WithMany("WatcherList")
                        .HasForeignKey("WatcherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Watched");

                    b.Navigation("Watcher");
                });

            modelBuilder.Entity("UserWatchingService.Entities.User", b =>
                {
                    b.Navigation("WatcherList");

                    b.Navigation("WatchingList");
                });
#pragma warning restore 612, 618
        }
    }
}
