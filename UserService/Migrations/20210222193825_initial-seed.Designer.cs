// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserService.Entities;

namespace UserService.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20210222193825_initial-seed")]
    partial class initialseed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("UserService.Entities.City", b =>
                {
                    b.Property<Guid>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CityId");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CityName");

                    b.HasKey("CityId");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            CityId = new Guid("9171f23e-adf2-4698-b73f-05c6fd7ad1be"),
                            CityName = "Novi Sad"
                        },
                        new
                        {
                            CityId = new Guid("9346b8c4-1b3b-435f-9c35-35de3a76fcf9"),
                            CityName = "Beograd"
                        });
                });

            modelBuilder.Entity("UserService.Entities.Corporation", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorporationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CorporationName");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Email");

                    b.Property<string>("HeadquartersAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("HeadquartersAddress");

                    b.Property<string>("HeadquartersCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("HeadquartersCity");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Password");

                    b.Property<string>("Pib")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Pib");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Telephone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Username");

                    b.HasKey("UserId");

                    b.HasIndex("CityId");

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Corporation");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("33253633-10e4-45c8-9b8e-84020a5c8c58"),
                            CityId = new Guid("9171f23e-adf2-4698-b73f-05c6fd7ad1be"),
                            CorporationName = "Financial Corporation",
                            Email = "financial_corpo@gmail.com",
                            HeadquartersAddress = "Radnicka 1",
                            HeadquartersCity = "Novi Sad",
                            IsActive = true,
                            Password = "pass123",
                            Pib = "187398",
                            RoleId = new Guid("728569aa-7a1f-45c9-b9d4-94bcc176bd0c"),
                            Telephone = "+3816228749275",
                            Username = "Financial Corporation"
                        },
                        new
                        {
                            UserId = new Guid("987268e5-f880-4f81-b1bf-5b9704604e26"),
                            CityId = new Guid("9171f23e-adf2-4698-b73f-05c6fd7ad1be"),
                            CorporationName = "Billing Corporation",
                            Email = "billing_corpo@gmail.com",
                            HeadquartersAddress = "Danila Kisa 15",
                            HeadquartersCity = "Novi Sad",
                            IsActive = true,
                            Password = "pass123",
                            Pib = "1844398",
                            RoleId = new Guid("728569aa-7a1f-45c9-b9d4-94bcc176bd0c"),
                            Telephone = "+3816228749275",
                            Username = "Billing Corporation"
                        });
                });

            modelBuilder.Entity("UserService.Entities.PersonalUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FirstName");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LastName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Password");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Telephone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Username");

                    b.HasKey("UserId");

                    b.HasIndex("CityId");

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("PersonalUser");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("ce593d02-c615-4af6-a794-c450b79e9b4d"),
                            CityId = new Guid("9171f23e-adf2-4698-b73f-05c6fd7ad1be"),
                            Email = "nata@gmail.com",
                            FirstName = "Natalija",
                            IsActive = true,
                            LastName = "Gajic",
                            Password = "pass123",
                            RoleId = new Guid("194df880-d4ce-4997-96c9-878102eb6e0e"),
                            Telephone = "+3816928749275",
                            Username = "NatalijaG"
                        },
                        new
                        {
                            UserId = new Guid("ff0c9396-7c4c-4bf5-a12e-6aa79c272413"),
                            CityId = new Guid("9171f23e-adf2-4698-b73f-05c6fd7ad1be"),
                            Email = "vladika@gmail.com",
                            FirstName = "Vladimir",
                            IsActive = true,
                            LastName = "Filipovic",
                            Password = "pass123",
                            RoleId = new Guid("728569aa-7a1f-45c9-b9d4-94bcc176bd0c"),
                            Telephone = "+3816968749275",
                            Username = "VladikaF"
                        },
                        new
                        {
                            UserId = new Guid("8c349e7b-1c97-486d-aa2e-e58205d11577"),
                            CityId = new Guid("9346b8c4-1b3b-435f-9c35-35de3a76fcf9"),
                            Email = "stefke@gmail.com",
                            FirstName = "Stefan",
                            IsActive = true,
                            LastName = "Ostojic",
                            Password = "pass123",
                            RoleId = new Guid("728569aa-7a1f-45c9-b9d4-94bcc176bd0c"),
                            Telephone = "+3816928749275",
                            Username = "StefanO"
                        });
                });

            modelBuilder.Entity("UserService.Entities.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoleId");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("RoleName");

                    b.HasKey("RoleId");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("194df880-d4ce-4997-96c9-878102eb6e0e"),
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = new Guid("728569aa-7a1f-45c9-b9d4-94bcc176bd0c"),
                            RoleName = "Regular user"
                        });
                });

            modelBuilder.Entity("UserService.Entities.Corporation", b =>
                {
                    b.HasOne("UserService.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserService.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("UserService.Entities.PersonalUser", b =>
                {
                    b.HasOne("UserService.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserService.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
